#!/usr/bin/env python

'Update local copy of Wikimedia access logs.'

# Copyright (c) 2012-2013 Los Alamos National Security, LLC, and others.

help_epilogue = '''
Logs only go to stdout, so as to capture the rsync chatter as well.

Note that we use rsync to download Wikipedia stuff, which isn't supported by
the Wikimedia site, so you have to use a mirror. See the list of mirrors:
<http://meta.wikimedia.org/wiki/Mirroring_Wikimedia_project_XML_dumps>

Notes:

* If a log file is changed, your local copy will be updated to match. This
  probably shouldn't happen, so investigate the situation if it does.
  (However, deleted log files will not also be deleted locally; e.g., you are
  OK if the mirror you are using goes into a zombie state.)

* This script will download several terabytes of data. Be patient and be
  courteous.

* --verify also takes a long time and gives no output if all's well. If you're
    worried about progress, you can use lsof to see what file is currently
    being checked.
'''

import os.path
import subprocess

import quacpath
import rsync
import testable
import u

l = u.l
c = u.c


### Setup ###

ap = u.ArgumentParser(description=__doc__, epilog=help_epilogue)
gr = ap.add_argument_group('arguments')
gr.add_argument('--config',
                help='location of config file',
                default=u.CONFIG_DEFAULT,
                metavar='FILE')
gr.add_argument('--verify',
                action='store_true',
                help='verify MD5sums of existing files instead of downloading')


### Main ###

def main():
   l.info('Wikimedia access logs in %s' % (log_dir))
   if (args.verify):
      l.info('mode: verify')
      subprocess.call('find %s -name md5sums.txt -exec sh -c "cd \$(dirname {}) && md5sum --check --quiet md5sums.txt || echo MD5 error in {}" \;' % (log_dir), shell=True)
   else:
      l.info('mode: update')
      l.info('bandwidth limit is %d KB/s' % (bwlimit))
      # FIXME: awkward to specify --include * simply to override --exclude *.
      rsync.all(mirror_url, log_dir, bwlimit, args.verbose)
   l.info('done')


### Bootstrap ###

try:

   args = u.parse_args(ap)
   u.configure(args.config)
   u.logging_init('wpacc')

   bwlimit = c.getint('wkpd', 'bandwidth_limit')
   mirror_url = c.get('wkpd', 'access_log_url')

   log_dir = c.getpath('wkpd', 'access_log_dir')
   if (not os.path.isdir(log_dir)):
      u.abort('%s is not a directory or does not exist' % (log_dir))

   if (__name__ == '__main__'):
      main()

except testable.Unittests_Only_Exception:
   testable.register('')
